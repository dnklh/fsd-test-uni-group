import app from './app';
import { initializeDatabase } from './config/database';
import { initializeRedis } from './config/redis';

// Import queue service to start processing jobs
import './services/queueService';

const PORT = process.env.PORT || 3000;

async function startServer() {
  try {
    // Initialize database connection
    await initializeDatabase();
    console.log('üìä Database initialized successfully');

    // Initialize Redis connection
    await initializeRedis();
    console.log('üî¥ Redis initialized successfully');

    // Start the server
    app.listen(PORT, () => {
      console.log(`üöÄ Server is running on port ${PORT}`);
      console.log(`üìñ API Documentation available at http://localhost:${PORT}`);
      console.log(`üè• Health check available at http://localhost:${PORT}/health`);
      
      if (process.env.NODE_ENV === 'development') {
        console.log('\nüîß Development mode endpoints:');
        console.log(`   ‚Ä¢ Register: POST http://localhost:${PORT}/api/auth/register`);
        console.log(`   ‚Ä¢ Login: POST http://localhost:${PORT}/api/auth/login`);
        console.log(`   ‚Ä¢ Projects: GET http://localhost:${PORT}/api/projects`);
        console.log(`   ‚Ä¢ Add Project: POST http://localhost:${PORT}/api/projects`);
      }
    });

  } catch (error) {
    console.error('‚ùå Failed to start server:', error);
    process.exit(1);
  }
}

// Handle graceful shutdown
process.on('SIGTERM', () => {
  console.log('üõë SIGTERM received, shutting down gracefully');
  process.exit(0);
});

process.on('SIGINT', () => {
  console.log('üõë SIGINT received, shutting down gracefully');
  process.exit(0);
});

// Handle unhandled promise rejections
process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
  process.exit(1);
});

// Handle uncaught exceptions
process.on('uncaughtException', (error) => {
  console.error('‚ùå Uncaught Exception:', error);
  process.exit(1);
});

// Start the server
startServer();
